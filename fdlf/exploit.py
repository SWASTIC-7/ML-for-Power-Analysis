import re
import numpy as np
from typing import Dict, Any, Optional

def parse_matpower(path: str) -> Dict[str, Any]:
    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
        text = f.read()

    no_comments = re.sub(r'%.*', '', text)

    def parse_scalar_str(name: str) -> Optional[str]:
        m = re.search(rf"mpc\.{name}\s*=\s*'([^']+)'\s*;", no_comments, flags=re.I)
        return m.group(1) if m else None

    def parse_scalar_float(name: str) -> Optional[float]:
        m = re.search(rf"mpc\.{name}\s*=\s*([+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?)\s*;", no_comments)
        return float(m.group(1)) if m else None

    def parse_matrix(name: str) -> Optional[np.ndarray]:
        m = re.search(rf"mpc\.{name}\s*=\s*\[(.*?)\];", no_comments, flags=re.S | re.I)
        if not m:
            return None
        block = m.group(1)
        rows = []
        for line in block.splitlines():
            line = line.strip()
            if not line:
                continue
            if line.endswith(';'):
                line = line[:-1].strip()
            if not line:
                continue
            parts = line.split()
            nums = []
            for p in parts:
                p = p.rstrip(',').strip("'\"")
                if p == '':
                    continue
                try:
                    nums.append(float(p))
                except ValueError:
                    lp = p.lower()
                    if lp in ('inf', '+inf'):
                        nums.append(float('inf'))
                    elif lp == '-inf':
                        nums.append(float('-inf'))
                    elif lp == 'nan':
                        nums.append(float('nan'))
                    else:
                        nums.append(float('nan'))
            if nums:
                rows.append(nums)
        if not rows:
            return np.empty((0, 0), dtype=float)
        width = max(len(r) for r in rows)
        padded = [r + [np.nan] * (width - len(r)) for r in rows]
        return np.array(padded, dtype=float)

    data = {
        'version': parse_scalar_str('version'),
        'baseMVA': parse_scalar_float('baseMVA'),
        'bus': parse_matrix('bus'),
        'gen': parse_matrix('gen'),
        'branch': parse_matrix('branch'),
        'gencost': parse_matrix('gencost'),
    }
    return data